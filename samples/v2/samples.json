{
  "root_private_key": "12aca40167fbdd1a11037e9fd440e3d510d9d9dea70a6646aa4aaf84d718d75a",
  "root_public_key": "acdd6d5b53bfee478bf689f8e012fe7988bf755e3d7c5152947abc149bc20189",
  "testcases": [
    {
      "title": "basic token",
      "filename": "test1_basic.bc",
      "print_token": {
        "biscuit2 (1 check)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"read\", \"write\", \"check1\", \"0\"]\n    authority: Block {\n            symbols: [\"read\", \"write\"]\n            version: 2\n            context: \"\"\n            facts: [\n                right(#authority, \"file1\", #read),\n                right(#authority, \"file2\", #read),\n                right(#authority, \"file1\", #write)\n            ]\n            rules: []\n            checks: []\n        }\n    blocks: [\n        Block {\n            symbols: [\"check1\", \"0\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if resource(#ambient, $0), operation(#ambient, #read), right(#authority, $0, #read)\n            ]\n        }\n    ]\n}"
      },
      "validations": {
        "": [
          {
            "facts": [
              "resource(#ambient, \"file1\")",
              "revocation_id(0, hex:2d41aa8d0131f0a9f171ae849f99f78461157101001752852e1731281ad460b3)",
              "revocation_id(1, hex:601083ff09e19882d762976dbb9bc98851439052e8c1bf3da1f32718a5a57eed)",
              "right(#authority, \"file1\", #read)",
              "right(#authority, \"file1\", #write)",
              "right(#authority, \"file2\", #read)"
            ],
            "rules": [],
            "privileged_rules": [],
            "checks": [
              "check if resource(#ambient, $0), operation(#ambient, #read), right(#authority, $0, #read)"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Err": [
              "Block(FailedBlockCheck { block_id: 1, check_id: 0, rule: \"check if resource(#ambient, $0), operation(#ambient, #read), right(#authority, $0, #read)\" })"
            ]
          }
        ]
      }
    },
    {
      "title": "different root key",
      "filename": "test2_different_root_key.bc",
      "print_token": {
        "biscuit2 (1 check)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"read\", \"check1\", \"0\"]\n    authority: Block {\n            symbols: [\"read\"]\n            version: 2\n            context: \"\"\n            facts: [\n                right(#authority, \"file1\", #read)\n            ]\n            rules: []\n            checks: []\n        }\n    blocks: [\n        Block {\n            symbols: [\"check1\", \"0\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if resource(#ambient, $0), operation(#ambient, #read), right(#authority, $0, #read)\n            ]\n        }\n    ]\n}"
      },
      "validations": {
        "": [
          null,
          {
            "Err": [
              "Format(Signature(InvalidSignature(\"signature error\")))"
            ]
          }
        ]
      }
    },
    {
      "title": "invalid signature format",
      "filename": "test3_invalid_signature_format.bc",
      "print_token": {
        "biscuit2 (1 check)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"read\", \"write\", \"check1\", \"0\"]\n    authority: Block {\n            symbols: [\"read\", \"write\"]\n            version: 2\n            context: \"\"\n            facts: [\n                right(#authority, \"file1\", #read),\n                right(#authority, \"file2\", #read),\n                right(#authority, \"file1\", #write)\n            ]\n            rules: []\n            checks: []\n        }\n    blocks: [\n        Block {\n            symbols: [\"check1\", \"0\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if resource(#ambient, $0), operation(#ambient, #read), right(#authority, $0, #read)\n            ]\n        }\n    ]\n}"
      },
      "validations": {
        "": [
          null,
          {
            "Err": [
              "Format(InvalidSignatureSize(16))"
            ]
          }
        ]
      }
    },
    {
      "title": "random block",
      "filename": "test4_random_block.bc",
      "print_token": {
        "biscuit2 (1 check)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"read\", \"write\", \"check1\", \"0\"]\n    authority: Block {\n            symbols: [\"read\", \"write\"]\n            version: 2\n            context: \"\"\n            facts: [\n                right(#authority, \"file1\", #read),\n                right(#authority, \"file2\", #read),\n                right(#authority, \"file1\", #write)\n            ]\n            rules: []\n            checks: []\n        }\n    blocks: [\n        Block {\n            symbols: [\"check1\", \"0\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if resource(#ambient, $0), operation(#ambient, #read), right(#authority, $0, #read)\n            ]\n        }\n    ]\n}"
      },
      "validations": {
        "": [
          null,
          {
            "Err": [
              "Format(Signature(InvalidSignature(\"signature error\")))"
            ]
          }
        ]
      }
    },
    {
      "title": "invalid signature",
      "filename": "test5_invalid_signature.bc",
      "print_token": {
        "biscuit2 (1 check)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"read\", \"write\", \"check1\", \"0\"]\n    authority: Block {\n            symbols: [\"read\", \"write\"]\n            version: 2\n            context: \"\"\n            facts: [\n                right(#authority, \"file1\", #read),\n                right(#authority, \"file2\", #read),\n                right(#authority, \"file1\", #write)\n            ]\n            rules: []\n            checks: []\n        }\n    blocks: [\n        Block {\n            symbols: [\"check1\", \"0\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if resource(#ambient, $0), operation(#ambient, #read), right(#authority, $0, #read)\n            ]\n        }\n    ]\n}"
      },
      "validations": {
        "": [
          null,
          {
            "Err": [
              "Format(Signature(InvalidSignature(\"signature error\")))"
            ]
          }
        ]
      }
    },
    {
      "title": "reordered blocks",
      "filename": "test6_reordered_blocks.bc",
      "print_token": {
        "biscuit2 (1 check)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"read\", \"write\", \"check1\", \"0\"]\n    authority: Block {\n            symbols: [\"read\", \"write\"]\n            version: 2\n            context: \"\"\n            facts: [\n                right(#authority, \"file1\", #read),\n                right(#authority, \"file2\", #read),\n                right(#authority, \"file1\", #write)\n            ]\n            rules: []\n            checks: []\n        }\n    blocks: [\n        Block {\n            symbols: [\"check1\", \"0\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if resource(#ambient, $0), operation(#ambient, #read), right(#authority, $0, #read)\n            ]\n        }\n    ]\n}",
        "biscuit3 (2 checks)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"read\", \"write\", \"check1\", \"0\", \"check2\"]\n    authority: Block {\n            symbols: [\"read\", \"write\"]\n            version: 2\n            context: \"\"\n            facts: [\n                right(#authority, \"file1\", #read),\n                right(#authority, \"file2\", #read),\n                right(#authority, \"file1\", #write)\n            ]\n            rules: []\n            checks: []\n        }\n    blocks: [\n        Block {\n            symbols: [\"check1\", \"0\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if resource(#ambient, $0), operation(#ambient, #read), right(#authority, $0, #read)\n            ]\n        },\n\tBlock {\n            symbols: [\"check2\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if resource(#ambient, \"file1\")\n            ]\n        }\n    ]\n}"
      },
      "validations": {
        "": [
          null,
          {
            "Err": [
              "Format(Signature(InvalidSignature(\"signature error\")))"
            ]
          }
        ]
      }
    },
    {
      "title": "invalid block fact with authority tag",
      "filename": "test7_invalid_block_fact_authority.bc",
      "print_token": {
        "biscuit2 (1 check)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"read\", \"write\", \"check1\", \"0\"]\n    authority: Block {\n            symbols: [\"read\"]\n            version: 2\n            context: \"\"\n            facts: [\n                right(#authority, \"file1\", #read)\n            ]\n            rules: []\n            checks: []\n        }\n    blocks: [\n        Block {\n            symbols: [\"write\", \"check1\", \"0\"]\n            version: 2\n            context: \"\"\n            facts: [\n                right(#authority, \"file1\", #write)\n            ]\n            rules: []\n            checks: [\n                check if operation(#ambient, #read)\n            ]\n        }\n    ]\n}"
      },
      "validations": {
        "": [
          null,
          {
            "Err": [
              "FailedLogic(InvalidBlockFact(0, \"right(#authority, \\\"file1\\\", #write)\"))"
            ]
          }
        ]
      }
    },
    {
      "title": "invalid block fact with ambient tag",
      "filename": "test8_invalid_block_fact_ambient.bc",
      "print_token": {
        "biscuit2 (1 check)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"read\", \"write\", \"check1\", \"0\"]\n    authority: Block {\n            symbols: [\"read\"]\n            version: 2\n            context: \"\"\n            facts: [\n                right(#authority, \"file1\", #read)\n            ]\n            rules: []\n            checks: []\n        }\n    blocks: [\n        Block {\n            symbols: [\"write\", \"check1\", \"0\"]\n            version: 2\n            context: \"\"\n            facts: [\n                right(#ambient, \"file1\", #write)\n            ]\n            rules: []\n            checks: [\n                check if operation(#ambient, #read)\n            ]\n        }\n    ]\n}"
      },
      "validations": {
        "": [
          null,
          {
            "Err": [
              "FailedLogic(InvalidBlockFact(0, \"right(#ambient, \\\"file1\\\", #write)\"))"
            ]
          }
        ]
      }
    },
    {
      "title": "expired token",
      "filename": "test9_expired_token.bc",
      "print_token": {
        "biscuit2 (1 check)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"check1\", \"expiration\", \"date\", \"time\"]\n    authority: Block {\n            symbols: []\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: []\n        }\n    blocks: [\n        Block {\n            symbols: [\"check1\", \"expiration\", \"date\", \"time\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if resource(#ambient, \"file1\"),\n                check if time(#ambient, $date), $date <= 2018-12-20T00:00:00+00:00\n            ]\n        }\n    ]\n}"
      },
      "validations": {
        "": [
          {
            "facts": [
              "operation(#ambient, #read)",
              "resource(#ambient, \"file1\")",
              "revocation_id(0, hex:97d9502fe0963f757c0f7e20e7d3a07b13f762c206c77506f4bd60af68565ce1)",
              "revocation_id(1, hex:5ccf80411f761b01c08783efede6b86898b920107507bd500c3854c8fe451f35)",
              "time(#ambient, SystemTime { tv_sec: 1608542592, tv_nsec: 0 })"
            ],
            "rules": [],
            "privileged_rules": [],
            "checks": [
              "check if resource(#ambient, \"file1\")",
              "check if time(#ambient, $date), $date <= 2018-12-20T00:00:00+00:00"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Err": [
              "Block(FailedBlockCheck { block_id: 1, check_id: 1, rule: \"check if time(#ambient, $date), $date <= 2018-12-20T00:00:00+00:00\" })"
            ]
          }
        ]
      }
    },
    {
      "title": "authority rules",
      "filename": "test10_authority_rules.bc",
      "print_token": {
        "biscuit2 (1 check)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"1\", \"read\", \"owner\", \"0\", \"write\", \"check1\", \"check2\", \"alice\"]\n    authority: Block {\n            symbols: [\"1\", \"read\", \"owner\", \"0\", \"write\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: [\n                right(#authority, $1, #read) <- resource(#ambient, $1), owner(#ambient, $0, $1),\n                right(#authority, $1, #write) <- resource(#ambient, $1), owner(#ambient, $0, $1)\n            ]\n            checks: []\n        }\n    blocks: [\n        Block {\n            symbols: [\"check1\", \"check2\", \"alice\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if right(#authority, $0, $1), resource(#ambient, $0), operation(#ambient, $1),\n                check if resource(#ambient, $0), owner(#ambient, #alice, $0)\n            ]\n        }\n    ]\n}"
      },
      "validations": {
        "": [
          {
            "facts": [
              "operation(#ambient, #read)",
              "owner(#ambient, #alice, \"file1\")",
              "resource(#ambient, \"file1\")",
              "revocation_id(0, hex:615c86ed96ffb3e756cee9a922facef14e7ceedd7833a22474ffa69986a02aab)",
              "revocation_id(1, hex:f5948d6b975b1f2e2571557588435445eeb088f6634c54247f0bc267bd11bc2a)",
              "right(#authority, \"file1\", #read)",
              "right(#authority, \"file1\", #write)"
            ],
            "rules": [],
            "privileged_rules": [
              "right(#authority, $1, #read) <- resource(#ambient, $1), owner(#ambient, $0, $1)",
              "right(#authority, $1, #write) <- resource(#ambient, $1), owner(#ambient, $0, $1)"
            ],
            "checks": [
              "check if resource(#ambient, $0), owner(#ambient, #alice, $0)",
              "check if right(#authority, $0, $1), resource(#ambient, $0), operation(#ambient, $1)"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Ok": 0
          }
        ]
      }
    },
    {
      "title": "verifier authority checks",
      "filename": "test11_verifier_authority_caveats.bc",
      "print_token": {
        "biscuit": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"read\"]\n    authority: Block {\n            symbols: [\"read\"]\n            version: 2\n            context: \"\"\n            facts: [\n                right(#authority, \"file1\", #read)\n            ]\n            rules: []\n            checks: []\n        }\n    blocks: [\n        \n    ]\n}"
      },
      "validations": {
        "": [
          {
            "facts": [
              "operation(#ambient, #read)",
              "resource(#ambient, \"file2\")",
              "revocation_id(0, hex:74d206f233bdcadbb6a8bdca0303b0520d75f94944f0dfc1d3b8edb0b3200b53)",
              "right(#authority, \"file1\", #read)"
            ],
            "rules": [],
            "privileged_rules": [],
            "checks": [
              "check if right(#authority, $0, $1), resource(#ambient, $0), operation(#ambient, $1)"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Err": [
              "Verifier(FailedVerifierCheck { check_id: 0, rule: \"check if right(#authority, $0, $1), resource(#ambient, $0), operation(#ambient, $1)\" })"
            ]
          }
        ]
      }
    },
    {
      "title": "authority checks",
      "filename": "test12_authority_caveats.bc",
      "print_token": {
        "biscuit": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"check1\"]\n    authority: Block {\n            symbols: [\"check1\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if resource(#ambient, \"file1\")\n            ]\n        }\n    blocks: [\n        \n    ]\n}"
      },
      "validations": {
        "file1": [
          {
            "facts": [
              "operation(#ambient, #read)",
              "resource(#ambient, \"file1\")",
              "revocation_id(0, hex:6da467f30421f10f2bdd7eacb3ed3ce0741757c1afa8da1775f376dba88a5683)"
            ],
            "rules": [],
            "privileged_rules": [],
            "checks": [
              "check if resource(#ambient, \"file1\")"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Ok": 0
          }
        ],
        "file2": [
          {
            "facts": [
              "operation(#ambient, #read)",
              "resource(#ambient, \"file2\")",
              "revocation_id(0, hex:6da467f30421f10f2bdd7eacb3ed3ce0741757c1afa8da1775f376dba88a5683)"
            ],
            "rules": [],
            "privileged_rules": [],
            "checks": [
              "check if resource(#ambient, \"file1\")"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Err": [
              "Block(FailedBlockCheck { block_id: 0, check_id: 0, rule: \"check if resource(#ambient, \\\"file1\\\")\" })"
            ]
          }
        ]
      }
    },
    {
      "title": "block rules",
      "filename": "test13_block_rules.bc",
      "print_token": {
        "biscuit2 (1 check)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"read\", \"valid_date\", \"time\", \"0\", \"1\", \"check1\"]\n    authority: Block {\n            symbols: [\"read\"]\n            version: 2\n            context: \"\"\n            facts: [\n                right(#authority, \"file1\", #read),\n                right(#authority, \"file2\", #read)\n            ]\n            rules: []\n            checks: []\n        }\n    blocks: [\n        Block {\n            symbols: [\"valid_date\", \"time\", \"0\", \"1\", \"check1\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: [\n                valid_date(\"file1\") <- time(#ambient, $0), resource(#ambient, \"file1\"), $0 <= 2030-12-31T12:59:59+00:00,\n                valid_date($1) <- time(#ambient, $0), resource(#ambient, $1), $0 <= 1999-12-31T12:59:59+00:00, ![\"file1\"].contains($1)\n            ]\n            checks: [\n                check if valid_date($0), resource(#ambient, $0)\n            ]\n        }\n    ]\n}"
      },
      "validations": {
        "file1": [
          {
            "facts": [
              "resource(#ambient, \"file1\")",
              "revocation_id(0, hex:9a30e5b4f22cdffd389bd06c77c8ef1912604b4ebe3f0de7ceea9f4ddb571da5)",
              "revocation_id(1, hex:35dc6e409f6582a669f0d41bf3cd9aa837a19764f0262e3dd8b6d2bdacee5b82)",
              "right(#authority, \"file1\", #read)",
              "right(#authority, \"file2\", #read)",
              "time(#ambient, SystemTime { tv_sec: 1608542592, tv_nsec: 0 })",
              "valid_date(\"file1\")"
            ],
            "rules": [
              "valid_date(\"file1\") <- time(#ambient, $0), resource(#ambient, \"file1\"), $0 <= 2030-12-31T12:59:59+00:00",
              "valid_date($1) <- time(#ambient, $0), resource(#ambient, $1), $0 <= 1999-12-31T12:59:59+00:00, ![\"file1\"].contains($1)"
            ],
            "privileged_rules": [],
            "checks": [
              "check if valid_date($0), resource(#ambient, $0)"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Ok": 0
          }
        ],
        "file2": [
          {
            "facts": [
              "resource(#ambient, \"file2\")",
              "revocation_id(0, hex:9a30e5b4f22cdffd389bd06c77c8ef1912604b4ebe3f0de7ceea9f4ddb571da5)",
              "revocation_id(1, hex:35dc6e409f6582a669f0d41bf3cd9aa837a19764f0262e3dd8b6d2bdacee5b82)",
              "right(#authority, \"file1\", #read)",
              "right(#authority, \"file2\", #read)",
              "time(#ambient, SystemTime { tv_sec: 1608542592, tv_nsec: 0 })"
            ],
            "rules": [
              "valid_date(\"file1\") <- time(#ambient, $0), resource(#ambient, \"file1\"), $0 <= 2030-12-31T12:59:59+00:00",
              "valid_date($1) <- time(#ambient, $0), resource(#ambient, $1), $0 <= 1999-12-31T12:59:59+00:00, ![\"file1\"].contains($1)"
            ],
            "privileged_rules": [],
            "checks": [
              "check if valid_date($0), resource(#ambient, $0)"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Err": [
              "Block(FailedBlockCheck { block_id: 1, check_id: 0, rule: \"check if valid_date($0), resource(#ambient, $0)\" })"
            ]
          }
        ]
      }
    },
    {
      "title": "regex_constraint",
      "filename": "test14_regex_constraint.bc",
      "print_token": {
        "biscuit": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"resource_match\", \"0\"]\n    authority: Block {\n            symbols: [\"resource_match\", \"0\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if resource(#ambient, $0), $0.matches(\"file[0-9]+.txt\")\n            ]\n        }\n    blocks: [\n        \n    ]\n}"
      },
      "validations": {
        "file1": [
          {
            "facts": [
              "resource(#ambient, \"file1\")",
              "revocation_id(0, hex:7d04d352cd30ad2875f003ff2ccc57dc7ec39763f3a823f87c9e26bf40b0310d)"
            ],
            "rules": [],
            "privileged_rules": [],
            "checks": [
              "check if resource(#ambient, $0), $0.matches(\"file[0-9]+.txt\")"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Err": [
              "Block(FailedBlockCheck { block_id: 0, check_id: 0, rule: \"check if resource(#ambient, $0), $0.matches(\\\"file[0-9]+.txt\\\")\" })"
            ]
          }
        ],
        "file123": [
          {
            "facts": [
              "resource(#ambient, \"file123.txt\")",
              "revocation_id(0, hex:7d04d352cd30ad2875f003ff2ccc57dc7ec39763f3a823f87c9e26bf40b0310d)"
            ],
            "rules": [],
            "privileged_rules": [],
            "checks": [
              "check if resource(#ambient, $0), $0.matches(\"file[0-9]+.txt\")"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Ok": 0
          }
        ]
      }
    },
    {
      "title": "multi queries checks",
      "filename": "test15_multi_queries_caveats.bc",
      "print_token": {
        "biscuit": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"must_be_present\"]\n    authority: Block {\n            symbols: [\"must_be_present\"]\n            version: 2\n            context: \"\"\n            facts: [\n                must_be_present(#authority, \"hello\")\n            ]\n            rules: []\n            checks: []\n        }\n    blocks: [\n        \n    ]\n}"
      },
      "validations": {
        "": [
          {
            "facts": [
              "must_be_present(#authority, \"hello\")",
              "revocation_id(0, hex:a869933238d941c3c6fd2a6949844a35727741e04865faf66ebdeb0e2cadab40)"
            ],
            "rules": [],
            "privileged_rules": [],
            "checks": [
              "check if must_be_present(#authority, $0) or must_be_present($0)"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Ok": 0
          }
        ]
      }
    },
    {
      "title": "check head name should be independent from fact names",
      "filename": "test16_caveat_head_name.bc",
      "print_token": {
        "biscuit": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"check1\", \"test\", \"hello\"]\n    authority: Block {\n            symbols: [\"check1\", \"test\", \"hello\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if resource(#ambient, #hello)\n            ]\n        }\n    blocks: [\n        Block {\n            symbols: []\n            version: 2\n            context: \"\"\n            facts: [\n                check1(#test)\n            ]\n            rules: []\n            checks: []\n        }\n    ]\n}"
      },
      "validations": {
        "": [
          {
            "facts": [
              "check1(#test)",
              "revocation_id(0, hex:4a366515e159a7577166d8158bdca3c0bb39cbabb4988824ad0c9aab5d3ea402)",
              "revocation_id(1, hex:2e8c19fefac5e54b7a8e21bb40eaf8aac70909e48f22c388ebb8cc742065d1dc)"
            ],
            "rules": [],
            "privileged_rules": [],
            "checks": [
              "check if resource(#ambient, #hello)"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Err": [
              "Block(FailedBlockCheck { block_id: 0, check_id: 0, rule: \"check if resource(#ambient, #hello)\" })"
            ]
          }
        ]
      }
    },
    {
      "title": "test expression syntax and all available operations",
      "filename": "test17_expressions.bc",
      "print_token": {
        "biscuit": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"query\", \"abc\", \"hello\", \"world\"]\n    authority: Block {\n            symbols: [\"query\", \"abc\", \"hello\", \"world\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if true,\n                check if !false,\n                check if false or true,\n                check if 1 < 2,\n                check if 2 > 1,\n                check if 1 <= 2,\n                check if 1 <= 1,\n                check if 2 >= 1,\n                check if 2 >= 2,\n                check if 3 == 3,\n                check if 1 + 2 * 3 - 4 / 2 == 5,\n                check if \"hello world\".starts_with(\"hello\") && \"hello world\".ends_with(\"world\"),\n                check if \"aaabde\".matches(\"a*c?.e\"),\n                check if \"abcD12\" == \"abcD12\",\n                check if 2019-12-04T09:46:41+00:00 < 2020-12-04T09:46:41+00:00,\n                check if 2020-12-04T09:46:41+00:00 > 2019-12-04T09:46:41+00:00,\n                check if 2019-12-04T09:46:41+00:00 <= 2020-12-04T09:46:41+00:00,\n                check if 2020-12-04T09:46:41+00:00 >= 2020-12-04T09:46:41+00:00,\n                check if 2020-12-04T09:46:41+00:00 >= 2019-12-04T09:46:41+00:00,\n                check if 2020-12-04T09:46:41+00:00 >= 2020-12-04T09:46:41+00:00,\n                check if 2020-12-04T09:46:41+00:00 == 2020-12-04T09:46:41+00:00,\n                check if #abc == #abc,\n                check if hex:12ab == hex:12ab,\n                check if [1, 2].contains(2),\n                check if [2019-12-04T09:46:41+00:00, 2020-12-04T09:46:41+00:00].contains(2020-12-04T09:46:41+00:00),\n                check if [false, true].contains(true),\n                check if [\"abc\", \"def\"].contains(\"abc\"),\n                check if [hex:12ab, hex:34de].contains(hex:34de),\n                check if [#hello, #world].contains(#hello)\n            ]\n        }\n    blocks: [\n        \n    ]\n}"
      },
      "validations": {
        "": [
          {
            "facts": [
              "revocation_id(0, hex:fde35e855f6e4a1037e6698d3085bef54a71093dc06c2f2a2027e7c126a340d8)"
            ],
            "rules": [],
            "privileged_rules": [],
            "checks": [
              "check if !false",
              "check if \"aaabde\".matches(\"a*c?.e\")",
              "check if \"abcD12\" == \"abcD12\"",
              "check if \"hello world\".starts_with(\"hello\") && \"hello world\".ends_with(\"world\")",
              "check if #abc == #abc",
              "check if 1 + 2 * 3 - 4 / 2 == 5",
              "check if 1 < 2",
              "check if 1 <= 1",
              "check if 1 <= 2",
              "check if 2 > 1",
              "check if 2 >= 1",
              "check if 2 >= 2",
              "check if 2019-12-04T09:46:41+00:00 < 2020-12-04T09:46:41+00:00",
              "check if 2019-12-04T09:46:41+00:00 <= 2020-12-04T09:46:41+00:00",
              "check if 2020-12-04T09:46:41+00:00 == 2020-12-04T09:46:41+00:00",
              "check if 2020-12-04T09:46:41+00:00 > 2019-12-04T09:46:41+00:00",
              "check if 2020-12-04T09:46:41+00:00 >= 2019-12-04T09:46:41+00:00",
              "check if 2020-12-04T09:46:41+00:00 >= 2020-12-04T09:46:41+00:00",
              "check if 3 == 3",
              "check if [\"abc\", \"def\"].contains(\"abc\")",
              "check if [#hello, #world].contains(#hello)",
              "check if [1, 2].contains(2)",
              "check if [2019-12-04T09:46:41+00:00, 2020-12-04T09:46:41+00:00].contains(2020-12-04T09:46:41+00:00)",
              "check if [false, true].contains(true)",
              "check if [hex:12ab, hex:34de].contains(hex:34de)",
              "check if false or true",
              "check if hex:12ab == hex:12ab",
              "check if true"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Ok": 0
          }
        ]
      }
    },
    {
      "title": "invalid block rule with unbound_variables",
      "filename": "test18_unbound_variables_in_rule.bc",
      "print_token": {
        "biscuit2 (1 check)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"check1\", \"test\", \"read\", \"unbound\", \"any1\", \"any2\"]\n    authority: Block {\n            symbols: [\"check1\", \"test\", \"read\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if operation(#ambient, #read)\n            ]\n        }\n    blocks: [\n        Block {\n            symbols: [\"unbound\", \"any1\", \"any2\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: [\n                operation($unbound, #read) <- operation($any1, $any2)\n            ]\n            checks: []\n        }\n    ]\n}"
      },
      "validations": {
        "": [
          null,
          {
            "Err": [
              "FailedLogic(InvalidBlockRule(0, \"operation($unbound, #read) <- operation($any1, $any2)\"))"
            ]
          }
        ]
      }
    },
    {
      "title": "invalid block rule generating an #authority or #ambient symbol with a variable",
      "filename": "test19_generating_ambient_from_variables.bc",
      "print_token": {
        "biscuit2 (1 check)": "Biscuit {\n    symbols: [\"authority\", \"ambient\", \"resource\", \"operation\", \"right\", \"current_time\", \"revocation_id\", \"check1\", \"test\", \"read\", \"any\"]\n    authority: Block {\n            symbols: [\"check1\", \"test\", \"read\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: []\n            checks: [\n                check if operation(#ambient, #read)\n            ]\n        }\n    blocks: [\n        Block {\n            symbols: [\"any\"]\n            version: 2\n            context: \"\"\n            facts: []\n            rules: [\n                operation($ambient, #read) <- operation($ambient, $any)\n            ]\n            checks: []\n        }\n    ]\n}"
      },
      "validations": {
        "": [
          {
            "facts": [
              "operation(#ambient, #write)",
              "revocation_id(0, hex:345b72b425b0e134ba294e1183e91af519a154fefc8f3a6b788da47668fa90c9)",
              "revocation_id(1, hex:5262c65a6042072011eb868c9f47a279264324a2781d3dd38e72f3464dc93348)"
            ],
            "rules": [
              "operation($ambient, #read) <- operation($ambient, $any)"
            ],
            "privileged_rules": [],
            "checks": [
              "check if operation(#ambient, #read)"
            ],
            "policies": [
              "allow if true"
            ]
          },
          {
            "Err": [
              "Block(FailedBlockCheck { block_id: 0, check_id: 0, rule: \"check if operation(#ambient, #read)\" })"
            ]
          }
        ]
      }
    }
  ]
}
