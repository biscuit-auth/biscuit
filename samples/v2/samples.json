{
  "root_private_key": "12aca40167fbdd1a11037e9fd440e3d510d9d9dea70a6646aa4aaf84d718d75a",
  "root_public_key": "acdd6d5b53bfee478bf689f8e012fe7988bf755e3d7c5152947abc149bc20189",
  "testcases": [
    {
      "title": "basic token",
      "filename": "test1_basic.bc",
      "token": [
        {
          "symbols": [
            "read",
            "write"
          ],
          "code": "right(\"file1\", #read);\nright(\"file2\", #read);\nright(\"file1\", #write);\n"
        },
        {
          "symbols": [
            "check1",
            "0"
          ],
          "code": "check if resource($0), operation(#read), right($0, #read);\n"
        }
      ],
      "validations": {
        "": {
          "world": {
            "facts": [
              "resource(\"file1\")",
              "revocation_id(0, hex:d0b78d6ca60f7ecd2b73162cba6442b80cb88ae8ee2faff80ef2ef4a397b3ab1)",
              "revocation_id(1, hex:44245305d22048f923864a76f719a689a442f4ebc0e3f49922ecb77a1b181024)",
              "right(\"file1\", #read)",
              "right(\"file1\", #write)",
              "right(\"file2\", #read)"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Err": [
              "Block(FailedBlockCheck { block_id: 1, check_id: 0, rule: \"check if resource($0), operation(#read), right($0, #read)\" })"
            ]
          },
          "verifier_code": "resource(\"file1\");\n"
        }
      }
    },
    {
      "title": "different root key",
      "filename": "test2_different_root_key.bc",
      "token": [
        {
          "symbols": [
            "read"
          ],
          "code": "right(\"file1\", #read);\n"
        },
        {
          "symbols": [
            "check1",
            "0"
          ],
          "code": "check if resource($0), operation(#read), right($0, #read);\n"
        }
      ],
      "validations": {
        "": {
          "world": null,
          "result": {
            "Err": [
              "Format(Signature(InvalidSignature(\"signature error\")))"
            ]
          },
          "verifier_code": ""
        }
      }
    },
    {
      "title": "invalid signature format",
      "filename": "test3_invalid_signature_format.bc",
      "token": [
        {
          "symbols": [
            "read",
            "write"
          ],
          "code": "right(\"file1\", #read);\nright(\"file2\", #read);\nright(\"file1\", #write);\n"
        },
        {
          "symbols": [
            "check1",
            "0"
          ],
          "code": "check if resource($0), operation(#read), right($0, #read);\n"
        }
      ],
      "validations": {
        "": {
          "world": null,
          "result": {
            "Err": [
              "Format(InvalidSignatureSize(16))"
            ]
          },
          "verifier_code": ""
        }
      }
    },
    {
      "title": "random block",
      "filename": "test4_random_block.bc",
      "token": [
        {
          "symbols": [
            "read",
            "write"
          ],
          "code": "right(\"file1\", #read);\nright(\"file2\", #read);\nright(\"file1\", #write);\n"
        },
        {
          "symbols": [
            "check1",
            "0"
          ],
          "code": "check if resource($0), operation(#read), right($0, #read);\n"
        }
      ],
      "validations": {
        "": {
          "world": null,
          "result": {
            "Err": [
              "Format(Signature(InvalidSignature(\"signature error\")))"
            ]
          },
          "verifier_code": ""
        }
      }
    },
    {
      "title": "invalid signature",
      "filename": "test5_invalid_signature.bc",
      "token": [
        {
          "symbols": [
            "read",
            "write"
          ],
          "code": "right(\"file1\", #read);\nright(\"file2\", #read);\nright(\"file1\", #write);\n"
        },
        {
          "symbols": [
            "check1",
            "0"
          ],
          "code": "check if resource($0), operation(#read), right($0, #read);\n"
        }
      ],
      "validations": {
        "": {
          "world": null,
          "result": {
            "Err": [
              "Format(Signature(InvalidSignature(\"signature error\")))"
            ]
          },
          "verifier_code": ""
        }
      }
    },
    {
      "title": "reordered blocks",
      "filename": "test6_reordered_blocks.bc",
      "token": [
        {
          "symbols": [
            "read",
            "write"
          ],
          "code": "right(\"file1\", #read);\nright(\"file2\", #read);\nright(\"file1\", #write);\n"
        },
        {
          "symbols": [
            "check1",
            "0"
          ],
          "code": "check if resource($0), operation(#read), right($0, #read);\n"
        },
        {
          "symbols": [
            "check2"
          ],
          "code": "check if resource(\"file1\");\n"
        }
      ],
      "validations": {
        "": {
          "world": null,
          "result": {
            "Err": [
              "Format(Signature(InvalidSignature(\"signature error\")))"
            ]
          },
          "verifier_code": ""
        }
      }
    },
    {
      "title": "scoped rules",
      "filename": "test7_scoped_rules.bc",
      "token": [
        {
          "symbols": [
            "user_id",
            "owner"
          ],
          "code": "user_id(\"alice\");\nowner(\"alice\", \"file1\");\n"
        },
        {
          "symbols": [
            "0",
            "read",
            "1",
            "check1"
          ],
          "code": "right($0, #read) <- resource($0), user_id($1), owner($1, $0);\ncheck if resource($0), operation(#read), right($0, #read);\n"
        },
        {
          "symbols": [],
          "code": "owner(\"alice\", \"file2\");\n"
        }
      ],
      "validations": {
        "": {
          "world": {
            "facts": [
              "operation(#read)",
              "owner(\"alice\", \"file1\")",
              "owner(\"alice\", \"file2\")",
              "resource(\"file2\")",
              "revocation_id(0, hex:85ac327fc6703282ec689d3d5cad2f62ba357bc5285012ee4210a6b8ac51dac6)",
              "revocation_id(1, hex:fa9013d9973657cd5050185a91f243859d982b6bd79a1fbf0c680e18ac526464)",
              "revocation_id(2, hex:d4c38cff9911dedd5ec9535ada28df22c25a7a6a2589ebb1bfc809a4e5dd2548)",
              "user_id(\"alice\")"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Err": [
              "Block(FailedBlockCheck { block_id: 1, check_id: 0, rule: \"check if resource($0), operation(#read), right($0, #read)\" })"
            ]
          },
          "verifier_code": "resource(\"file2\");\noperation(#read);\n"
        }
      }
    },
    {
      "title": "scoped checks",
      "filename": "test8_scoped_checks.bc",
      "token": [
        {
          "symbols": [
            "read"
          ],
          "code": "right(\"file1\", #read);\n"
        },
        {
          "symbols": [
            "check1",
            "0"
          ],
          "code": "check if resource($0), operation(#read), right($0, #read);\n"
        },
        {
          "symbols": [],
          "code": "right(\"file2\", #read);\n"
        }
      ],
      "validations": {
        "": {
          "world": {
            "facts": [
              "operation(#read)",
              "resource(\"file2\")",
              "revocation_id(0, hex:d82a7c1a18cfa4314b375a87c0a56a3053da388ea98bff667ce4d5400b7aa981)",
              "revocation_id(1, hex:80992689d9e68ef103a9d620a107dc38fc020dd7e11238781547d6b8dfd7ad72)",
              "revocation_id(2, hex:f6624085e6ea881004795493f67e6335e109dd228a060d05083cc49c88233944)",
              "right(\"file1\", #read)",
              "right(\"file2\", #read)"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Err": [
              "Block(FailedBlockCheck { block_id: 1, check_id: 0, rule: \"check if resource($0), operation(#read), right($0, #read)\" })"
            ]
          },
          "verifier_code": "resource(\"file2\");\noperation(#read);\n"
        }
      }
    },
    {
      "title": "expired token",
      "filename": "test9_expired_token.bc",
      "token": [
        {
          "symbols": [],
          "code": ""
        },
        {
          "symbols": [
            "check1",
            "expiration",
            "date",
            "time"
          ],
          "code": "check if resource(\"file1\");\ncheck if time($date), $date <= 2018-12-20T00:00:00+00:00;\n"
        }
      ],
      "validations": {
        "": {
          "world": {
            "facts": [
              "operation(#read)",
              "resource(\"file1\")",
              "revocation_id(0, hex:d30401ced69d2a2a3ce04bdee201316e7d256b2b44c25e2a2c3db54a226dfa0d)",
              "revocation_id(1, hex:53792abfe5845c74575528cc99803c02ab7dedf809f5b9ec5859a2f812c4627d)",
              "time(2020-12-21T09:23:12+00:00)"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Err": [
              "Block(FailedBlockCheck { block_id: 1, check_id: 1, rule: \"check if time($date), $date <= 2018-12-20T00:00:00+00:00\" })"
            ]
          },
          "verifier_code": "resource(\"file1\");\noperation(#read);\ntime(2020-12-21T09:23:12+00:00);\n"
        }
      }
    },
    {
      "title": "verifier scope",
      "filename": "test10_verifier_scope.bc",
      "token": [
        {
          "symbols": [
            "read"
          ],
          "code": "right(\"file1\", #read);\n"
        },
        {
          "symbols": [],
          "code": "right(\"file2\", #read);\n"
        }
      ],
      "validations": {
        "": {
          "world": {
            "facts": [
              "operation(#read)",
              "resource(\"file2\")",
              "revocation_id(0, hex:81cec0693dbe65a0e6a97bec0e046629b96ade022bcbf0eb85a4f32fe08af176)",
              "revocation_id(1, hex:f478ed76b9c914b8626021362ea9a395fbd5ac5349ac11e200c76dec95271bce)",
              "right(\"file1\", #read)",
              "right(\"file2\", #read)"
            ],
            "rules": [],
            "checks": [
              "check if right($0, $1), resource($0), operation($1)"
            ],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Err": [
              "Verifier(FailedVerifierCheck { check_id: 0, rule: \"check if right($0, $1), resource($0), operation($1)\" })"
            ]
          },
          "verifier_code": "resource(\"file2\");\noperation(#read);\n\ncheck if right($0, $1), resource($0), operation($1);\n"
        }
      }
    },
    {
      "title": "verifier authority checks",
      "filename": "test11_verifier_authority_caveats.bc",
      "token": [
        {
          "symbols": [
            "read"
          ],
          "code": "right(\"file1\", #read);\n"
        }
      ],
      "validations": {
        "": {
          "world": {
            "facts": [
              "operation(#read)",
              "resource(\"file2\")",
              "revocation_id(0, hex:db94822670781ef0678edf5e9b11c5e75fcedb90c2243cd4993415a81b3abb23)",
              "right(\"file1\", #read)"
            ],
            "rules": [],
            "checks": [
              "check if right($0, $1), resource($0), operation($1)"
            ],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Err": [
              "Verifier(FailedVerifierCheck { check_id: 0, rule: \"check if right($0, $1), resource($0), operation($1)\" })"
            ]
          },
          "verifier_code": "resource(\"file2\");\noperation(#read);\n\ncheck if right($0, $1), resource($0), operation($1);\n"
        }
      }
    },
    {
      "title": "authority checks",
      "filename": "test12_authority_caveats.bc",
      "token": [
        {
          "symbols": [
            "check1"
          ],
          "code": "check if resource(\"file1\");\n"
        }
      ],
      "validations": {
        "file1": {
          "world": {
            "facts": [
              "operation(#read)",
              "resource(\"file1\")",
              "revocation_id(0, hex:3527bbda37830c73381efdeb2c41eac3468240ddb263e7897266cc391c21f37f)"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Ok": 0
          },
          "verifier_code": "resource(\"file1\");\noperation(#read);\n"
        },
        "file2": {
          "world": {
            "facts": [
              "operation(#read)",
              "resource(\"file2\")",
              "revocation_id(0, hex:3527bbda37830c73381efdeb2c41eac3468240ddb263e7897266cc391c21f37f)"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Err": [
              "Block(FailedBlockCheck { block_id: 0, check_id: 0, rule: \"check if resource(\\\"file1\\\")\" })"
            ]
          },
          "verifier_code": "resource(\"file2\");\noperation(#read);\n"
        }
      }
    },
    {
      "title": "block rules",
      "filename": "test13_block_rules.bc",
      "token": [
        {
          "symbols": [
            "read"
          ],
          "code": "right(\"file1\", #read);\nright(\"file2\", #read);\n"
        },
        {
          "symbols": [
            "valid_date",
            "time",
            "0",
            "1",
            "check1"
          ],
          "code": "valid_date(\"file1\") <- time($0), resource(\"file1\"), $0 <= 2030-12-31T12:59:59+00:00;\nvalid_date($1) <- time($0), resource($1), $0 <= 1999-12-31T12:59:59+00:00, ![\"file1\"].contains($1);\ncheck if valid_date($0), resource($0);\n"
        }
      ],
      "validations": {
        "file1": {
          "world": {
            "facts": [
              "resource(\"file1\")",
              "revocation_id(0, hex:3d5459878dfb4e1dba4e1ff1c585b98435117dd8f27b4402e836405e2073d58d)",
              "revocation_id(1, hex:6af4d647ce1df7e80c1cb4736087e21340fa3ed63b0d3f172d25e8e9964489c3)",
              "right(\"file1\", #read)",
              "right(\"file2\", #read)",
              "time(2020-12-21T09:23:12+00:00)",
              "valid_date(\"file1\")"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Ok": 0
          },
          "verifier_code": "resource(\"file1\");\ntime(2020-12-21T09:23:12+00:00);\n"
        },
        "file2": {
          "world": {
            "facts": [
              "resource(\"file2\")",
              "revocation_id(0, hex:3d5459878dfb4e1dba4e1ff1c585b98435117dd8f27b4402e836405e2073d58d)",
              "revocation_id(1, hex:6af4d647ce1df7e80c1cb4736087e21340fa3ed63b0d3f172d25e8e9964489c3)",
              "right(\"file1\", #read)",
              "right(\"file2\", #read)",
              "time(2020-12-21T09:23:12+00:00)"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Err": [
              "Block(FailedBlockCheck { block_id: 1, check_id: 0, rule: \"check if valid_date($0), resource($0)\" })"
            ]
          },
          "verifier_code": "resource(\"file2\");\ntime(2020-12-21T09:23:12+00:00);\n"
        }
      }
    },
    {
      "title": "regex_constraint",
      "filename": "test14_regex_constraint.bc",
      "token": [
        {
          "symbols": [
            "resource_match",
            "0"
          ],
          "code": "check if resource($0), $0.matches(\"file[0-9]+.txt\");\n"
        }
      ],
      "validations": {
        "file1": {
          "world": {
            "facts": [
              "resource(\"file1\")",
              "revocation_id(0, hex:c1e6da318f99f8ad00d1b6bbfcf56fbd7ffd2b499f5719e6a371ad82d1d94368)"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Err": [
              "Block(FailedBlockCheck { block_id: 0, check_id: 0, rule: \"check if resource($0), $0.matches(\\\"file[0-9]+.txt\\\")\" })"
            ]
          },
          "verifier_code": "resource(\"file1\");\n"
        },
        "file123": {
          "world": {
            "facts": [
              "resource(\"file123.txt\")",
              "revocation_id(0, hex:c1e6da318f99f8ad00d1b6bbfcf56fbd7ffd2b499f5719e6a371ad82d1d94368)"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Ok": 0
          },
          "verifier_code": "resource(\"file123.txt\");\n"
        }
      }
    },
    {
      "title": "multi queries checks",
      "filename": "test15_multi_queries_caveats.bc",
      "token": [
        {
          "symbols": [
            "must_be_present"
          ],
          "code": "must_be_present(\"hello\");\n"
        }
      ],
      "validations": {
        "": {
          "world": {
            "facts": [
              "must_be_present(\"hello\")",
              "revocation_id(0, hex:f1aba7009cd19fbc5605ad5a318775bc8bb4c887cc3d00f405689420a8ccdc6a)"
            ],
            "rules": [],
            "checks": [
              "check if must_be_present($0) or must_be_present($0)"
            ],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Ok": 0
          },
          "verifier_code": "\ncheck if must_be_present($0) or must_be_present($0);\n"
        }
      }
    },
    {
      "title": "check head name should be independent from fact names",
      "filename": "test16_caveat_head_name.bc",
      "token": [
        {
          "symbols": [
            "check1",
            "test",
            "hello"
          ],
          "code": "check if resource(#hello);\n"
        },
        {
          "symbols": [],
          "code": "check1(#test);\n"
        }
      ],
      "validations": {
        "": {
          "world": {
            "facts": [
              "check1(#test)",
              "revocation_id(0, hex:a4155e1642c441f169f8251cc3c1a1fa6b172543948c0a1a33d6409c28cae987)",
              "revocation_id(1, hex:63f977e2f45b998a920fba2bb69af6c02e4f094294dc89bdbaabb88f8a582186)"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Err": [
              "Block(FailedBlockCheck { block_id: 0, check_id: 0, rule: \"check if resource(#hello)\" })"
            ]
          },
          "verifier_code": ""
        }
      }
    },
    {
      "title": "test expression syntax and all available operations",
      "filename": "test17_expressions.bc",
      "token": [
        {
          "symbols": [
            "query",
            "abc",
            "hello",
            "world"
          ],
          "code": "check if true;\ncheck if !false;\ncheck if false or true;\ncheck if 1 < 2;\ncheck if 2 > 1;\ncheck if 1 <= 2;\ncheck if 1 <= 1;\ncheck if 2 >= 1;\ncheck if 2 >= 2;\ncheck if 3 == 3;\ncheck if 1 + 2 * 3 - 4 / 2 == 5;\ncheck if \"hello world\".starts_with(\"hello\") && \"hello world\".ends_with(\"world\");\ncheck if \"aaabde\".matches(\"a*c?.e\");\ncheck if \"abcD12\" == \"abcD12\";\ncheck if 2019-12-04T09:46:41+00:00 < 2020-12-04T09:46:41+00:00;\ncheck if 2020-12-04T09:46:41+00:00 > 2019-12-04T09:46:41+00:00;\ncheck if 2019-12-04T09:46:41+00:00 <= 2020-12-04T09:46:41+00:00;\ncheck if 2020-12-04T09:46:41+00:00 >= 2020-12-04T09:46:41+00:00;\ncheck if 2020-12-04T09:46:41+00:00 >= 2019-12-04T09:46:41+00:00;\ncheck if 2020-12-04T09:46:41+00:00 >= 2020-12-04T09:46:41+00:00;\ncheck if 2020-12-04T09:46:41+00:00 == 2020-12-04T09:46:41+00:00;\ncheck if #abc == #abc;\ncheck if hex:12ab == hex:12ab;\ncheck if [1, 2].contains(2);\ncheck if [2019-12-04T09:46:41+00:00, 2020-12-04T09:46:41+00:00].contains(2020-12-04T09:46:41+00:00);\ncheck if [false, true].contains(true);\ncheck if [\"abc\", \"def\"].contains(\"abc\");\ncheck if [hex:12ab, hex:34de].contains(hex:34de);\ncheck if [#hello, #world].contains(#hello);\n"
        }
      ],
      "validations": {
        "": {
          "world": {
            "facts": [
              "revocation_id(0, hex:388e71fd289d831f617872e9c454eac446a88080f34bfbe4da50fbce7144bcda)"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Ok": 0
          },
          "verifier_code": ""
        }
      }
    },
    {
      "title": "invalid block rule with unbound_variables",
      "filename": "test18_unbound_variables_in_rule.bc",
      "token": [
        {
          "symbols": [
            "check1",
            "test",
            "read"
          ],
          "code": "check if operation(#read);\n"
        },
        {
          "symbols": [
            "unbound",
            "any1",
            "any2"
          ],
          "code": "operation($unbound, #read) <- operation($any1, $any2);\n"
        }
      ],
      "validations": {
        "": {
          "world": {
            "facts": [
              "operation(#write)",
              "revocation_id(0, hex:2e13a1deb4edc2c841324ab4120351aa8696d455750045511cb94ee243b9c35f)",
              "revocation_id(1, hex:628bf94715ce5ca37fe9d49bacee6a13fb77d8fd481b09875757bd567c93f0ca)"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Err": [
              "FailedLogic(InvalidBlockRule(0, \"operation($unbound, #read) <- operation($any1, $any2)\"))"
            ]
          },
          "verifier_code": "operation(#write);\n"
        }
      }
    },
    {
      "title": "invalid block rule generating an #authority or #ambient symbol with a variable",
      "filename": "test19_generating_ambient_from_variables.bc",
      "token": [
        {
          "symbols": [
            "check1",
            "test",
            "read"
          ],
          "code": "check if operation(#read);\n"
        },
        {
          "symbols": [
            "any"
          ],
          "code": "operation(#read) <- operation($any);\n"
        }
      ],
      "validations": {
        "": {
          "world": {
            "facts": [
              "operation(#read)",
              "operation(#write)",
              "revocation_id(0, hex:e0728acdc6aac007be70c2795e681c911fbf1bb0d8063a04258813d3cc36ebd2)",
              "revocation_id(1, hex:29226d29e16815d2adae6139b5761515f5fc219dcafbf1e113f03ab1b7134790)"
            ],
            "rules": [],
            "checks": [],
            "policies": [
              "allow if true"
            ]
          },
          "result": {
            "Err": [
              "Block(FailedBlockCheck { block_id: 0, check_id: 0, rule: \"check if operation(#read)\" })"
            ]
          },
          "verifier_code": "operation(#write);\n"
        }
      }
    }
  ]
}
